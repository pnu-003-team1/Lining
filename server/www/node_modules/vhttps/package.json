{
  "_from": "vhttps",
  "_id": "vhttps@0.1.1",
  "_inBundle": false,
  "_integrity": "sha512-3BGVuxSSvViDmy0Nuxe4AJ4VbDV+DMmINOD5inSJS433PQAvZGXcq5CUGeZequzgggspzWwdfnxqT04LC4M9Sg==",
  "_location": "/vhttps",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "vhttps",
    "fetchSpec": "latest",
    "name": "vhttps",
    "raw": "vhttps",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vhttps/-/vhttps-0.1.1.tgz",
  "_shasum": "c9758de6fd10fdbd0d8953820d3a8d13dab031ad",
  "_spec": "vhttps",
  "_where": "/home/ubuntu/byj/Lining/server/www",
  "author": {
    "email": "kevinkassimo@gmail.com",
    "name": "Kevin Qian"
  },
  "bugs": {
    "url": "https://github.com/kevinkassimo/vhttps/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Virtual Secure Servers. Hosting multiple HTTPS sites on single server/port WITHOUT reverse proxy. Can integrate with Express and vhost",
  "devDependencies": {
    "eslint": "^4.18.2",
    "mocha": "^5.0.4"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "homepage": "https://github.com/kevinkassimo/vhttps#readme",
  "keywords": [
    "host",
    "https",
    "virtual"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "vhttps",
  "optionalDependencies": {},
  "readme": "# VHTTPS Virtual Host on HTTPS\nThis minimal package aims to allow hosting multiple HTTPS sites with multiple certificates on a single server/IP address, without the need to use any reverse proxy. \n\n## Install\n`npm install --save vhttps`  \n\n## Usage\nUse `vhttps.init`:  \n```js\nconst vhttps = require('vhttps');\n\nconst options = {\n    cert: fs.readFileSync('./default-cert.pem'),\n    key: fs.readFileSync('./default-key.pem'),\n};\n\nconst cred_a = {\n    cert: fs.readFileSync('./a-cert.pem'),\n    key: fs.readFileSync('./a-key.pem'),\n};\n\nconst cred_b = {\n    cert: fs.readFileSync('./b-cert.pem'),\n    key: fs.readFileSync('./b-key.pem'),\n};\n\n// Create an vhttps instance\nconst server = vhttps.init();\n\n// Set HTTPS options (with default certificate)\nserver.setOptions(options);\n\n// Introduce handlers to different domain names\nserver.use('a.com', cred_a, (req, res) => {\n    res.end('A.COM WORKS!');\n});\nserver.use('b.com', cred_b, (req, res) => {\n    res.end('B.COM WORKS!');\n});\n\n// (optional) Add default handler\nserver.use((req, res) => {\n    res.end('DEFAULT.COM WORKS!');\n});\n\n// Listen at port 443\nserver.listen(443);\n```\nUse `vhttps.init` with Express:  \n```js\nconst vhttps = require('vhttps');\nconst express = require('express');\n\nconst options = {};\n\nconst router_a = express.Router();\nrouter_a.get('/', (req, res) => {\n    res.end('A.COM WORKS!');\n});\n\nconst router_b = express.Router();\nrouter_b.get('/', (req, res) => {\n    res.end('B.COM WORKS!');\n});\n\nconst cred_a = {\n    cert: fs.readFileSync('./a-cert.pem'),\n    key: fs.readFileSync('./a-key.pem'),\n};\n\nconst cred_b = {\n    cert: fs.readFileSync('./b-cert.pem'),\n    key: fs.readFileSync('./b-key.pem'),\n};\n\n// Create an vhttps instance\nconst server = vhttps.init();\n\n// Introduce handlers to different domain names\nserver.use('a.com', cred_a, router_a);\nserver.use('b.com', cred_b, router_b);\n\n// Listen at port 443\nserver.listen(443);\n```\n\nDirect usage for `vhttps.createServer`:  \n```js\nconst vhttps = require('vhttps');\n\nconst defaultCredential = {\n    cert: fs.readFileSync('./default-cert.pem'),\n    key: fs.readFileSync('./default-key.pem'),\n};\n\nconst credentialA = {\n    hostname: 'a.com',\n    cert: fs.readFileSync('./a-cert.pem'),\n    key: fs.readFileSync('./a-key.pem'),\n};\n\nconst credentialB = {\n    hostname: 'b.com',\n    cert: fs.readFileSync('./b-cert.pem'),\n    key: fs.readFileSync('./b-key.pem'),\n};\n\nconst server = vhttps.createServer(defaultCredential, [credentialA, credentialB], (req, res) => {\n    switch (req.headers.host) {\n        case 'a.com':\n            // custom handlers based on which host you are using\n            res.end('A.COM works!')\n            break;\n        case 'b.com':\n            res.end('B.COM works!')\n            break;\n        default:\n            res.end('???');\n    }\n});\n\nserver.listen(443);\n```\nDirect usage for `vhttps.createServer` with Express `vhost`:  \n```js\nconst fs = require('fs');\nconst express = require('express');\nconst vhost = require('vhost');\nconst vhttps = require('vhttps');\n\nconst app = express();\n\napp.use(vhost('a.com', function (req, res) {\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('hello from a.com!')\n}));\n\napp.use(vhost('b.com', function (req, res) {\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('hello from b.com!');\n}));\n\nconst defaultCredential = {\n    cert: fs.readFileSync('./default-cert.pem'),\n    key: fs.readFileSync('./default-key.pem'),\n};\n\nconst credentialA = {\n    hostname: 'a.com',\n    cert: fs.readFileSync('./a-cert.pem'),\n    key: fs.readFileSync('./a-key.pem'),\n};\n\nconst credentialB = {\n    hostname: 'b.com',\n    cert: fs.readFileSync('./b-cert.pem'),\n    key: fs.readFileSync('./b-key.pem'),\n};\n\nconst httpsServer = vhttps.createServer(defaultCredential, [credentialA, credentialB], app);\nhttpsServer.listen(443);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kevinkassimo/vhttps.git"
  },
  "scripts": {
    "lint": "eslint --ext js .",
    "test": "mocha --reporter spec --bail --check-leaks test/"
  },
  "version": "0.1.1"
}
